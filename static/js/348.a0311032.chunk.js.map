{"version":3,"file":"static/js/348.a0311032.chunk.js","mappings":"2MAAaA,EAAc,SAAC,GAAD,SAAGC,SAAwBC,KAA3B,EACdC,EAAY,SAAC,GAAD,SAAGC,MAAH,EACZC,EAAsB,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,SAE5BK,EAFmD,EAAbF,OAEbG,cAAcC,OAE7C,OADuBP,EAASC,MAAME,QAAO,SAAAK,GAAI,OAAIA,EAAKC,KAAKH,cAAcI,SAASL,EAArC,GAEpD,E,2BCIKM,EAAgB,CAClBF,KAAM,GACNG,OAAQ,IAkDZ,EA/CmB,WACf,IAAMZ,GAAWa,EAAAA,EAAAA,IAAYd,GACvBe,GAAWC,EAAAA,EAAAA,MAejB,OACI,SAAC,KAAD,CAAQC,SAbe,SAAC,EAAkBC,GAAa,IAA7BR,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,OAE5BM,EAAS,CAAEC,IADNC,EAAAA,EAAAA,MACcX,KAAMA,EAAMG,OAAQA,GAG3C,GADqBZ,EAASqB,MAAK,SAAAC,GAAI,OAAIA,EAAKb,OAASS,EAAOT,IAAzB,IACrB,OAAOc,MAAM,iIAG/BT,GAASU,EAAAA,EAAAA,IAAWN,IACpBD,EAAQQ,WACX,EAGyCd,cAAeA,EAArD,UACI,UAAC,KAAD,YACI,qCACI,SAAC,KAAD,CACIe,KAAK,OACLjB,KAAK,OACLkB,YAAY,aACZC,UAAQ,QAIhB,uCACI,SAAC,KAAD,CACIF,KAAK,MACLjB,KAAK,SACLkB,YAAY,aACZC,UAAQ,QAIhB,mBAAQF,KAAK,SAAb,6BAIf,E,SC7BD,EAtBe,WACX,IAAMG,GAAQhB,EAAAA,EAAAA,IAAYX,GACpBY,GAAWC,EAAAA,EAAAA,MAQjB,OACI,4BACI,6CACA,kBAAOe,SATQ,SAACC,GACpB,IAAQF,EAAUE,EAAEC,OAAZH,MAERf,GAASmB,EAAAA,EAAAA,GAAUJ,GACtB,EAKwCH,KAAK,OAAOG,MAAOA,MAG/D,E,SCwBD,EArCoB,WAChB,IAAMK,GAAkBrB,EAAAA,EAAAA,IAAYT,GAC9BU,GAAWC,EAAAA,EAAAA,OAEjBoB,EAAAA,EAAAA,YAAU,WACNrB,GAASsB,EAAAA,EAAAA,MACZ,GAAC,CAACtB,IAOH,OACI,wBACKoB,EAAgBG,KAAI,SAAA7B,GAAI,OACrB,2BACI,4BAAOA,EAAKC,KAAZ,QACA,0BAAOD,EAAKI,UACZ,mBAAQ0B,QAAS,kBAXVnB,EAW4BX,EAAKW,QAVpDL,GAASyB,EAAAA,EAAAA,IAAcpB,IADL,IAACA,CAWU,EAAjB,sBAHKX,EAAKW,GADO,KASpC,E,SChCYqB,E,OAAUC,EAAAA,IAAH,07CCmBpB,EAdiB,WACb,OACI,+BACI,UAACD,EAAD,YACI,uCACA,SAACE,EAAD,KAEA,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,QAIf,C","sources":["components/redux/selectors.js","components/modules/4Contacts/Form.jsx","components/modules/4Contacts/Filter.jsx","components/modules/4Contacts/ContactList.jsx","components/modules/4Contacts/app.styled.jsx","components/modules/4Contacts/Contacts.jsx"],"sourcesContent":["export const getContacts = ({ contacts }) => contacts.items;\nexport const getFilter = ({ filter }) => filter;\nexport const getFilteredContacts = ({ contacts, filter }) => {\n    // console.log(contacts.items);\n    const normalizeFilter = filter.toLowerCase().trim();\n    const visiblePersons = contacts.items.filter(cont => cont.name.toLowerCase().includes(normalizeFilter));\n    return visiblePersons;\n};","import { useDispatch, useSelector } from 'react-redux';\n\n// import { addContact } from './redux/contacts/contacts-actions';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getContacts } from '../../redux/selectors';\n// import PropTypes from 'prop-types';\n\nimport { Formik, Field, Form } from 'formik';\nimport { nanoid } from 'nanoid';\n\n\nconst initialValues = {\n    name: '',\n    number: '',\n};\n\nconst FormikForm = () => {\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n    // console.log(contacts);\n\n    const onSubmitAddContact = ({ name, number }, actions) => {\n        let id = nanoid();\n        let person = { id: id, name: name, number: number };\n\n        const contactsFind = contacts.find(item => item.name === person.name);\n        if (contactsFind) return alert(\"Це хіба можна так робити?\");\n        \n        // console.log(person);\n        dispatch(addContact(person));\n        actions.resetForm();\n    };\n\n    return (\n        <Formik onSubmit={onSubmitAddContact} initialValues={initialValues}>\n            <Form >\n                <label >Name\n                    <Field \n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"FormikForm\"\n                        required\n                    />\n                    {/* <ErrorMessage name=\"name\" component=\"div\" /> */}\n                </label>\n                <label>Number\n                    <Field \n                        type=\"tel\"\n                        name=\"number\"\n                        placeholder=\"FormikForm\"\n                        required\n                    />\n                    {/* <ErrorMessage name=\"number\" component=\"div\" /> */}\n                </label>\n                <button type=\"submit\">Add contact</button>\n            </Form>\n        </Formik>\n    );\n};\n// FormikForm.propTypes = {\n//     hendleSubmit:PropTypes.func.isRequired,\n// };\n\nexport default FormikForm;","// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from \"react-redux\";\n\n// import { setFilter } from \"./redux/filter/filter-actions\";\nimport { setFilter } from \"../../redux/filter/filter-slice\";\nimport { getFilter } from \"../../redux/selectors\";\n\nconst Filter = () => {\n    const value = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const onFilterChange = (e) => {\n        const { value } = e.target;\n\n        dispatch(setFilter(value));\n    };\n\n    return (\n        <div>\n            <label>Filter names</label>\n            <input onChange={onFilterChange} type=\"text\" value={value} />\n        </div>\n    );\n};\n// Filter.propTypes = {\n//     onFilterChange: PropTypes.func.isRequired,\n//     value:PropTypes.string.isRequired,\n// };\n\nexport default Filter;","// import PropTypes from 'prop-types';\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n// import { deleteContact } from \"./redux/contacts/contacts-actions\";\nimport { deleteContact } from \"../../redux/contacts/contacts-operations\";\nimport { getFilteredContacts } from \"../../redux/selectors\";\nimport { fetchContacts } from \"../../redux/contacts/contacts-operations\";\n\n\nconst ContactList = () => {\n    const filterdContacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    },[dispatch]);\n\n    const onClickTakeId = (id) => {\n        dispatch(deleteContact(id));\n    };\n\n    // console.log(filterdContacts);\n    return (\n        <ul>\n            {filterdContacts.map(cont => (\n                <li key={cont.id}>\n                    <span>{cont.name}:</span>\n                    <span>{cont.number}</span>\n                    <button onClick={()=>onClickTakeId(cont.id)}>Delete</button>\n                </li>\n            ))}\n        </ul>\n    );\n};\n// ContactList.defaultProps = {\n//     contacts:[],\n// }\n// ContactList.propTypes = {\n//     contacts: PropTypes.arrayOf(PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         name: PropTypes.string.isRequired,\n//         number:PropTypes.string.isRequired,\n//     }),),\n//     onClick: PropTypes.func.isRequired,\n// };\n\nexport default ContactList;","import styled from '@emotion/styled';\n\nexport const MainDiv = styled.div`\n    // position: relative;\n\n    width: 461px;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 20px 20px 10px 20px;\n\n    text-align: right;\n    border: 3px solid darkolivegreen;\n    border-radius: 8px;\n    color: darkolivegreen;\n\n    h1 {\n        margin-top: 0px;\n    }\n    h2 {\n        text-align: center;\n    }\n    label {\n        font-weight: 700;\n    }\n    button {\n        padding: 11px;\n\n        font-weight: 700;\n        font-size: 18px;\n        \n        background-color: transparent;\n        border: 0px solid gray;\n        border-radius: 3px;\n        background-color: lightgrey;\n        color: darkolivegreen;\n        transition: all 200ms linear;\n        \n        :hover {\n            cursor: pointer;\n            color: lightgrey;\n            background-color: darkolivegreen;\n        }  \n        :active {\n            scale: 0.9;\n        }    \n    }\n    // form input {\n    //     border-radius: 3px;\n    // }\n    form button {\n        margin-top: 10px;\n    }\n    ul {\n        padding: 0;\n        margin: 10px 0 0 0;\n    }\n    li {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: flex-end;\n        align-items: baseline;\n        \n        width: 460px;\n        margin-top: 3px;\n\n        span:first-of-type {\n            margin-right:auto;\n        }\n        span:last-of-type {\n            margin-right:10px;\n        }\n    }\n`;","\n\nimport FormikForm from \"./Form\";\nimport Filter from \"./Filter\";\nimport ContactList from \"./ContactList\";\nimport { MainDiv } from \"./app.styled\";\n\nconst Contacts = () => {\n    return (\n        <>\n            <MainDiv>\n                <h1>Phonebook</h1>\n                <FormikForm/>\n                \n                <h2>Contacts</h2>\n                <Filter/>\n                <ContactList/>\n            </MainDiv>\n        </>\n    );\n};\nexport default Contacts;"],"names":["getContacts","contacts","items","getFilter","filter","getFilteredContacts","normalizeFilter","toLowerCase","trim","cont","name","includes","initialValues","number","useSelector","dispatch","useDispatch","onSubmit","actions","person","id","nanoid","find","item","alert","addContact","resetForm","type","placeholder","required","value","onChange","e","target","setFilter","filterdContacts","useEffect","fetchContacts","map","onClick","deleteContact","MainDiv","styled","Form"],"sourceRoot":""}